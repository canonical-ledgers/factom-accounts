#!/usr/bin/env node
const fs = require('fs');

const axios = require('axios');
const csv = require('csvtojson');
const yargs = require('yargs');

const { FactomCli } = require('factom');

const argv = yargs
    .options({
        address: {
            demand: true,
            alias: 'a',
            describe: 'The address you would like to monitor'
        },
        currency: {
            demand: true,
            alias: 'c',
            describe: 'The currency you are accounting in, given as three letter code (e.g. USD, GBP, EUR)'
        },
        btcex: {
            demand: false,
            alias: 'b',
            describe: 'The exchange you wish to use to get the price of FCT in BTC. Defaults to Cryptocompare Current Aggregate',
            default: 'CCCAGG'
        },
        fiatex: {
            demand: false,
            alias: 'x',
            describe: 'The exchange you wish to use to get the price of BTC in your chosen currency. Defaults to Cryptocompare Current Aggregate',
            default: 'CCCAGG'
        },
        host: {
            demand: false,
            alias: 'H',
            describe: 'The IP of your walletd host. Defaults to localhost',
            default: 'localhost'
        },
        port: {
            demand: false,
            alias: 'P',
            describe: 'The port to access walletd. Defaults to 8089',
            default: 8089
        },
        file: {
            demand: true,
            alias: 'f',
            describe: 'CSV file to output and track transaction history'
        },
        key: {
            demand: false,
            alias: 'k',
            describe: 'Your bitcoin.tax key'
        },
        secret: {
            demand: false,
            alias: 'S',
            describe: 'Your bitcoin.tax secret'
        },
        type: {
            demand: false,
            alias: 't',
            describe: 'Your bitcoin.tax transaction type. Defaults to `income`. See the bitcoin.tax API docs for details',
            default: 'Income'
        },
    })
    .help()
    .alias('help', 'h')
    .argv;

const cli = new FactomCli({
    walletd: {
        host: argv.host,
        port: argv.port,
    }
});

console.log('Waiting for new transactions...');

async function checkForNewTx(currentCsvState) {
    try {
        const { transactions } = await cli.walletdApi('transactions', {address: argv.address});
        const newTransactionIds = new Set();
        const newTransactions = [];

        for (const transaction of transactions) {
            if (transaction.outputs
            && !currentCsvState.has(transaction.txid)
            && !newTransactionIds.has(transaction.txid)
            && transaction.outputs.some(output => output.address === argv.address)) {
                newTransactionIds.add(transaction.txid);
                const apiHistoryPeriod = Date.now() - transaction.timestamp * 1000 > 600000000 ? 'hour' : 'minute';
                const fiatPrice = await cryptoCompareApi(apiHistoryPeriod, transaction.timestamp);
                if (fiatPrice !== undefined) { //prevents api error writing false values to logs
                    newTransactions.unshift({
                        date: new Date(transaction.timestamp * 1000).toISOString(),
                        address: argv.address,
                        txid: transaction.txid,
                        fctReceived: transaction.outputs
                            .filter(output => output.address === argv.address)
                            .map(output => output.amount * Math.pow(10, -8))
                            .reduce((sum, current) => sum + current, 0),
                        txType: transaction.inputs !== null ? 'Non-Coinbase' : 'Coinbase',
                        btcExchange: argv.btcex,
                        fiatExchange: argv.fiatex,
                        fiatPrice,
                        get fiatValue() { return this.fctReceived * fiatPrice; },
                        currency: argv.currency.toUpperCase()
                    });
                }
            }
        }

        if (newTransactions[0] !== undefined) {
            console.log(`Found new transaction(s): \n${JSON.stringify(newTransactions, undefined, 2)}`);
            await handleNewTransactions(newTransactions);
        }
    } catch(err) {
        throw new Error(err);
    }
}

async function handleNewTransactions(receivedTransactions) {
    try {
        for (const item of receivedTransactions) {
            const csvData = `${item.date},${argv.address},${item.txid},${item.fctReceived},${item.txType},${item.btcExchange},${item.fiatExchange},${item.fiatPrice},${item.fiatValue},${item.currency}\n`;
            fs.appendFileSync(`${argv.file}`, csvData);
        }
        console.log('Written new transaction(s) to csv');

        if (argv.key !== undefined) {
            await bitcoinTaxApi(receivedTransactions);
            console.log('Posted new transaction(s) to bitcoin.tax');
        }
        console.log('Waiting for new transactions...');
    } catch(err) {
        throw new Error(`Check transaction history for potential errors or inconcistency... \n ${err}`);
    }
}

async function cryptoCompareApi(history, timestamp) {
    for (let i = 0; i < 10; i++) {
        try {
            const histBtc = await axios.get(`https://min-api.cryptocompare.com/data/histo${history}?fsym=FCT&tsym=BTC&limit=0&aggregate=1&toTs=${timestamp}&e=${argv.btcex}`);
            const histFiat = await axios.get(`https://min-api.cryptocompare.com/data/histo${history}?fsym=BTC&tsym=${argv.currency}&limit=0&aggregate=1&toTs=${timestamp}&e=${argv.fiatex}`);
            const avgBtcPrice = (histBtc.data.Data[1].high + histBtc.data.Data[1].low + histBtc.data.Data[1].open + histBtc.data.Data[1].close) / 4;
            const avgFiatPrice = (histFiat.data.Data[1].high + histFiat.data.Data[1].low + histFiat.data.Data[1].open + histFiat.data.Data[1].close) / 4;
            return avgFiatPrice * avgBtcPrice;
        } catch(err) {
            const timeout = Math.pow(2, i);
            await wait(timeout);
            if (i === 10) {
                throw new Error(`failed to connect to ${err.hostname}... \n ${err}`);
            }
        }
    }
}

async function bitcoinTaxApi(transactionData) {
    for (let i = 0; i < 10; i++) {
        try {
            const bitcoinTaxArr = [];
            transactionData.forEach(item => {
                bitcoinTaxArr.push({
                    date: item.date,
                    action: argv.type,
                    symbol: 'FCT',
                    currency: `${argv.currency}`,
                    volume: item.fctReceived,
                    price: item.fiatPrice,
                    txhash: item.txid,
                    recipient: argv.address
                });
            });

            const options = {
                method: 'POST',
                url: 'https://api.bitcoin.tax/v1/transactions',
                data: bitcoinTaxArr,
                headers: {
                    'User-Agent': 'axios/0.18.0',
                    'X-APIKEY': `${argv.key}`,
                    'X-APISECRET': `${argv.secret}`
                },
                json: true
            };
            return await axios(options);
        } catch(err) {
            const timeout = Math.pow(2, i);
            await wait(timeout);
            if (i === 10) {
                throw new Error(`failed to connect to bitcoin.tax. If above transactions are missing from bitcoin.tax, remove from master CSV then restart script \n ${err}`);
            }
        }
    }
}

function wait(timeout) {
    return new Promise(resolve => setTimeout(() => resolve(), timeout));
}

async function getFileState() {
    const currentFileState = new Set();
    if (fs.existsSync(`${argv.file}`)) {
        const csvFilePath = `${argv.file}`;
        await new Promise((resolve, reject) => {
            csv()
                .fromFile(csvFilePath)
                .on('json', csvRow => currentFileState.add(csvRow.txid))
                .on('done', () => resolve())
                .on('error', () => reject());
        });
        return currentFileState;
    } else {
        console.log('Initialising new CSV');
        const csvInit='date,address,txid,fctReceived,txType,btcExchange,fiatExchange,fiatPrice,fiatValue,currency\n';
        fs.writeFileSync(`${argv.file}`, csvInit);
        return currentFileState;
    }
}

async function getTransactions(x) {
    setTimeout(async () => {
        try {
            const currentFileState = await getFileState();
            await checkForNewTx(currentFileState);
            return getTransactions(300000);
        } catch(err) {
            console.log(err);
        }
    }, x);
}

// async function test() {
//     try {
//         fs.unlinkSync(`${argv.file}`);
//     } catch (err) {
//         console.log('No file to delete');
//     }
// }

// test();
getTransactions(25000);
